# Software requirements
- Windows
- CMake (version >= 3.17.0)
- Visual Studio 2019 (VS 16)
	- Requires Workload: "Desktop development with C++"


# Compile GLFW
- info: extern/glfw-3.3 is the source code for glfw 3.3, unedited, straight from their website
- create `lib` directory
- `cd extern/glfw-3.3`
- `cmake -G "Visual Studio 16" .`
- open `GLFW.sln` in Visual Studio
- build Debug and RelWithDebInfo configurations for `glfw` project
  - in Solution Explorer, right click "Solution 'GLFW'" and click Build
  - go to "Build" menu -> "Configuration Manager", and change "Active solution configuration" to "RelWithDebInfo".
  - in Solution Explorer, right click "Solution 'GLFW'" and click Build
- copy `glfw-3.3/src/Debug/glfw3.lib`   into `lib/` and rename it to `glfw3_d.lib`
- copy `glfw-3.3/src/RelWithDebInfo/glfw3.lib` into `lib/`
- cleanup
  - close solution in Visual Studio
  - go back to base directory and run `git clean -fd` to remove all the Visual Studio bs. (Don't worry, the lib/ folder is ignored!)


# Create Visual Studio solution
- create `build` directory
- `cd build`
- `cmake -G "Visual Studio 16" ..`


# If you want to switch to 64-bit:
- recompile all the libraries as 64-bit
	- delete all the library CMake builds: `git clean -fd`
	- recreate the solutions using `cmake -G "Visual Studio 16" -A x64 .`
	- rebuild the and copy over the libraries, but this ending them with `_x64.lib` and `_x64_d.lib` respectively
- delete and recreate the `build` folder
- navigate into it: `cd build`
- create for x64: `cmake -G "Visual Studio 16" -A x64 ..`

# If you want to switch back to 32-bit:
- Same thing but `-A Win32` instead of `-A x64`
